generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  phone     String?
  address   String?
  currentToken String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coupons   Coupon[]
  brand       Brand?    @relation() // <--- thêm dòng này
}

model Coupon {
  id          String    @id @default(uuid())
  code       String   @unique
  discount   Float
  expires_at DateTime
  user_id    String?
  usageLimit    Int?      // Optional limit for number of times the code can be used
  currentUsage  Int       @default(0) // Number of times the code has been used
  user       User?    @relation(fields: [user_id], references: [id])
  isActive      Boolean   @default(true) // Whether the code is currently active
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Image {
  id          String    @id @default(uuid())
  filename  String   @unique
  path      String
  fileType  FileType @default(IMAGE)
  size      Int?
  duration  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FrameType {
  id          String    @id @default(uuid())
  name        String          @unique
  description String?
  image       String?
  columns     Int
  rows        Int
  totalImages Int
  isActive    Boolean         @default(true)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  templates   FrameTemplate[]
}

model FrameTemplate {
  id          String    @id @default(uuid())
  name        String
  filename    String    @unique
  path        String
  preview     String?
  frameTypeId String
  frameType   FrameType @relation(fields: [frameTypeId], references: [id], onDelete: Cascade)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Brand {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  name            String
  logo            String?
  background      String?
  primaryColor    String?
  secondaryColor  String?
  socialFacebook  String?
  socialInstagram String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}


enum FileType {
  IMAGE
  GIF
  VIDEO
}

enum Role {
  ADMIN
  KETOAN
  USER
}
