generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Brand {
  id              String   @id @default(uuid())
  userId          String   @unique
  name            String
  logo            String?
  background      String?
  primaryColor    String?
  secondaryColor  String?
  socialFacebook  String?
  socialInstagram String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
}

model Coupon {
  id           String   @id @default(uuid())
  code         String   @unique
  discount     Float
  expires_at   DateTime
  user_id      String?
  usageLimit   Int?      
  currentUsage Int      @default(0) 
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model FrameTemplate {
  id          String    @id @default(uuid())
  name        String
  filename    String    @unique
  background  String    // Background image
  overlay     String    // Overlay image
  frameTypeId String
  userId      String?   // ID của người dùng sở hữu template này
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  frameType   FrameType @relation(fields: [frameTypeId], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [userId], references: [id])

  @@index([frameTypeId])
  @@index([userId])
}

model FrameType {
  id            String          @id @default(uuid())
  name          String          @unique
  description   String?
  image         String?
  columns       Int
  rows          Int
  totalImages   Int
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  templates     FrameTemplate[]
}

model Image {
  id        String    @id @default(uuid())
  filename  String    @unique
  path      String
  fileType  FileType  @default(IMAGE)
  size      Int?
  duration  Int?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model User {
  id            String          @id @default(uuid())
  name          String
  email         String          @unique
  password      String
  role          Role            @default(USER)
  phone         String?
  address       String?
  currentToken  String?         @db.Text
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  coupons       Coupon[]
  brand         Brand?
  frameTemplates FrameTemplate[] // Thêm quan hệ với FrameTemplate
}

enum FileType {
  IMAGE
  GIF
  VIDEO
}

enum Role {
  ADMIN
  KETOAN
  USER
}
